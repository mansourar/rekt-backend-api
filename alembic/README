# Alembic - Database Migrations

Alembic is a database migration tool for SQLAlchemy, used to manage changes to your database schema over time. This directory contains the Alembic configuration and migration scripts for your project.

## Requirements

- Python 3.x
- SQLAlchemy
- Alembic

## Usage

Overview:
Migration files are run sequentially and the sequence is defined by the file name starting with the time the script was created.
This means that if two of you are working on migration scripts that might involve the same tables, you might need to discuss whose script should be created first in order to run first.
Do not change the timestamps or filenames of any previous migrations.
It is a good idea to bundle up a bunch of related changes into one migration, if you can. Such as the new database schema for an entire feature.
Migrations should add the new changes for the database schema to "upgrades" and the "downgrades" should exactly undo these changes.
This is the magic of migrations as they allow you to rollback and go forwards as you can guarantee what the state of the database will be at each step.
This means ALL changes to the schema must be defined in migrations - hacking around in postgres to change the schema on a different environment will confuse the hell out of the migration system as some unknown entity will have changed the state and affect whether migration steps can run.

## Creating Migrations

Option 1 - Manual/Custom
- To create a new revision, run `alembic revision -m "name_of_migration_such_as_add_column_to_table"`. This will create a file in alembic/versions that you will
need to edit. Do not edit the timestamp on the filename!
- Edit the migration script with typed up statements. All migrations should define everything that is to change in 'upgrade' and then define the inverse of this in 'downgrade' (the steps required to undo the upgrade).
- Update the relevant `app/internal/database/postgres/models/<feature>_models.py`
- TIP if you run `alembic check` after updating the models above it will guide you as to what the changes are that need to be applied.

Option 2 - Autogenerated (Spicy!)
- Add your changes in whatever model class definitions in code in `database/postgres/models/<feature>_models.py`.
- Ensure your containers are up `docker-compose up` and start up the backend.
- Run `alembic revision --autogenerate -m "name_of_migration_such_as_add_column_to_table"`
- The autogenerated file will appear in `alembic/versions`

Warning! [Alembic cannot detect everything!](https://alembic.sqlalchemy.org/en/latest/autogenerate.html#what-does-autogenerate-detect-and-what-does-it-not-detect)
Do not blindly accept what it tells you. You may need to reorder the autogenerated statements to ensure foreign key constraints are satisfied etc.

## Running migrations

Make sure your postgres container is running (docker-compose up)
- To upgrade to the latest revision, run `alembic upgrade head`.
- To downgrade to a previous revision, run `alembic downgrade -1`. Going right back to the very start migration you can run `alembic downgrade base`
- To view the current revision, run `alembic current`.
- To see what changes to the database probably need to have migrations, run `alembic check`

## Troubleshooting

- Does Alembic autogenerate tell you that you should drop all your tables that you were expecting to be created?
No problem, simply go into `alembic/env.py` and ensure that the variable `target_metadata` includes your models' Base.metadata in it's list.
You should only need to do this when you create a new  `app/internal/database/postgres/<feature>_models.py` as it needs to be imported into `alembic/env.py`.
- Does Alembic not apply a migration you think it should?
Silly Alembic! Alembic always thinks it knows best about what migrations you have run. So if you run a new migration with `alembic upgrade head`, then edit the migration script, then try to run it again it will just skip running it.
It keeps a record of this in the table `alembic_version`. If you run `alembic downgrade -1` or even `alembic downgrade base` (to go back to the very start of all migrations) it should allow you to re-upgrade.

## Do's and Do NOTs

- Do NOT alter the filenames that are generated for the migrations, these ensure that they are run in the correct order - the order in which they were made.
- Do NOT run sql statements altering schema in tables directly - this will confuse the hell out of alembic who is expecting things to be in a certain state in accordance with it's version.
- Try NOT to alter previous migrations if it has been merged AND there are any later migrations. This includes deleting migration files or altering their date order. You don't know if later migrations rely on previous ones. Migrations generally only go forwards, you cannot edit the past! You can only create a new migration to "layer on" your changes.
- DO write idempotent migrations: Ensure that your upgrade and downgrade operations can be safely run multiple times. Not sure they can? Just run `alembic upgrade head` and `alembic downgrade base` to check.
- DO use revision/release tags to help track specific versions of your database schema to releases of the game. We may want to, later, bundle "in-dev" migrations into one single one for each release as it can be easier to understand.
- DO test migrations before merging them. It's annoying to have to fix them with a new migration if you have gone past the point of no return.


## How this was setup

1. Installed the required dependencies by running `pip install -r requirements.txt` after adding alembic to the requirements.txt.
2. Created an Alembic migration environment by running `alembic init alembic`. This created a new directory called `alembic` with the Alembic configuration and migration scripts and this README which I have since added this lovely info.
3. Updated the generated `alembic.ini` file with settings to ensure we generate date-prepended filenames for migrations (this stops the order from ever going out of sync)
4. Updated the env.py to pull in information about our database connection and database metadata/schema.
5. Created the first revision by running `alembic revision --autogenerate -m "Initial migration"` which generated the migration from our models.py


## Resources

- [Alembic Documentation](https://alembic.sqlalchemy.org/en/latest/index.html)
- [SQLAlchemy Documentation](https://docs.sqlalchemy.org/en/13/index.html)
